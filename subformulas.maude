fmod SIMPLE-NAT is
  sort Constant .
  op zero : -> Constant .
  op s : Constant -> Constant .
  op + : Constant Constant -> Constant .
  vars N M : Constant .
  eq +(zero, N) = N .
  eq +(s(N) , M) = +(N,s(M)) .
  eq s(s(N)) = N .
endfm


fmod NEW-TERM is protecting META-LEVEL .
  op translate : TermList -> TermList .
  eq translate(empty) = empty .
  eq translate(C:Constant) = C:Constant .
  eq translate(D:Variable) = empty .
  op + : Term Term -> Term .
  op s : Term -> Term .
  op in : Term Term -> Term .
  op inspecial : Term Term Term -> Term .
  op equat : Term Term -> Term .
  op equatspecial : Term Term Term -> Term .
  op and : Term Term -> Term .
  op or : Term Term -> Term .
  op equiv : Term Term -> Term .
  op impl : Term Term -> Term .
  op not : Term  -> Term .
  op sepa : -> Qid .
  op spepa : -> Qid .
  op zero : -> Constant .
  eq translate(s(TL:Term)) = s(TL:Term) .
  eq translate(+(TL:Term, T:Term)) = +(TL:Term, T:Term) .
  eq translate(and(TL:Term, T:Term)) = and(translate(TL:Term), translate(T:Term)) .
  eq translate(or(TL:Term, T:Term)) = or(translate(TL:Term), translate(T:Term)) .
  eq translate(impl(TL:Term, T:Term)) = impl(translate(TL:Term), translate(T:Term)) .
  eq translate(equiv(TL:Term, T:Term)) = equiv(translate(TL:Term), translate(T:Term)) .
  eq translate(not(T:Term)) = not(translate(TL:Term)) .

  eq translate(in(TL:Term, T:Term)) = inspecial(TL:Term, spepa,T:Term) .

  eq translate(equat(TL:Term, T:Term)) = equatspecial(TL:Term, spepa, T:Term) .

  eq translate(Q:Qid[TL:TermList]) = translate(TL:TermList) .
  eq translate((T:Term, TL:TermList)) = translate(T:Term),sepa, translate(TL:TermList) .
endfm

---red translate('Forall[or(c:Constant = zero , d:Constant = s(zero))]) .