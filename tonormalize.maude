fmod SIMPLE is
  sort Constant .
  op zero : -> Constant .
  op s : Constant -> Constant .
  op + : Constant Constant -> Constant .
  vars N M : Constant .
  eq +(zero, N) = N .
  eq +(s(N) , M) = +(N,s(M)) .
  eq s(s(N)) = N .
endfm


fmod NEW-TERM is protecting META-LEVEL .
  op terms : TermList -> TermList .
  eq terms(empty) = empty .
  eq terms(C:Constant) = C:Constant .
  eq terms(D:Variable) = empty .
  op + : Term Term -> Term .
  op s : Term -> Term .
  op in : Term Term -> Term .
  op equat : Term Term -> Term .
  op sepa : -> Qid .
  op zero : -> Constant .
  eq terms(s(TL:Term)) = s(TL:Term),sepa, terms(TL:Term) .
  eq terms(+(TL:Term, T:Term)) = +(TL:Term, T:Term),sepa, terms((TL:Term, T:Term)) .
  eq terms(equat(TL:Term , T:Term)) = terms((TL:Term, T:Term)) .
  eq terms(in(TL:Term , T:Term)) = terms((TL:Term, T:Term)) .
  eq terms(Q:Qid[TL:TermList]) = terms(TL:TermList) .
  eq terms((T:Term, TL:TermList)) = terms(T:Term),sepa, terms(TL:TermList) .
endfm

red in SIMPLE : +(s(c:Constant),zero) .
red in SIMPLE : s(zero) .
red in SIMPLE : +(zero,s(c:Constant)) .
red in SIMPLE : +(c:Constant,s(zero)) .
red in SIMPLE : +(c:Constant,s(c:Constant)) .
red in SIMPLE : +(zero,zero) .
red in SIMPLE : c:Constant .
red in SIMPLE : zero .
red in SIMPLE : +(s(c:Constant),c:Constant) .
red in SIMPLE : s(c:Constant) .
red in SIMPLE : s(s(c:Constant)) .
red in SIMPLE : s(s(zero)) .
red in SIMPLE : +(zero,s(zero)) .
red in SIMPLE : +(zero,c:Constant) .
red in SIMPLE : +(s(zero),c:Constant) .
red in SIMPLE : +(s(zero),zero) .